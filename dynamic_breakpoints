import os, getpass
from langchain_openai import ChatOpenAI
from pprint import pprint
from langchain_core.messages import SystemMessage, HumanMessage, RemoveMessage
from IPython.display import Image, display
from langgraph.graph import MessagesState
from langgraph.graph import StateGraph, START, END
import sqlite3
from IPython.display import Image, display
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import StateGraph, START
from dotenv import load_dotenv
from langgraph.prebuilt import tools_condition, ToolNode
from typing_extensions import TypedDict
from langgraph.errors import NodeInterrupt

load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise ValueError("API key not found. Ensure your .env file is set correctly.")

llm = ChatOpenAI(model_name="gpt-4", temperature=0.7, openai_api_key=openai_api_key)

#Making nodes
class State(TypedDict):
    input: str

def step_1(state: State) -> State:
    print("step 1")
    return State

#Node which raises an interrupt
def step_2(state: State) -> State:
    if len(state['input']) > 5:
        #Raising interrupt
        raise NodeInterrupt(f"Received input that is longer than 5 characters: {state['input']}")
    
    print("---Step 2---")
    return state

def step_3(state: State) -> State:
    print("step 3")
    return State
